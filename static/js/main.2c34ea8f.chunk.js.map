{"version":3,"sources":["component/TodoApp/Todolist.js","component/Header/Header.js","component/About/About.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","state","inputVal","items","handleChange","event","setState","target","value","storeItems","preventDefault","deleteItem","keyValue","allItems","splice","this","className","onSubmit","placeholder","onChange","type","map","data","index","key","onClick","Component","Header","to","About","style","textAlign","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAGqBA,G,kNACrBC,MAAQ,CACJC,SAAS,GAAGC,MAAM,I,EAEtBC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVJ,SAAWG,EAAME,OAAOC,S,EAGhCC,WAAa,SAACJ,GACVA,EAAMK,iBADa,IAEZR,EAAY,EAAKD,MAAjBC,SAEP,EAAKI,SAAS,CACVH,MAAM,GAAD,mBAAK,EAAKF,MAAME,OAAhB,CAAsBD,IAC3BA,SAAS,M,EAGjBS,WAAa,SAACC,GACV,IAAMC,EAAW,EAAKZ,MAAME,MAC5BU,EAASC,OAAOF,EAAS,GACzB,EAAKN,SAAS,CACVH,MAAMU,K,uDAGA,IAAD,SACoBE,KAAKd,MAAvBC,EADF,EACEA,SAASC,EADX,EACWA,MAChB,OACI,yBAAKa,UAAY,kBAEb,0BAAMA,UAAY,gBAAgBC,SAAUF,KAAKN,YAC7C,yCACA,2BAAOD,MAAON,EAAWgB,YAAY,WAAWC,SAAUJ,KAAKX,aAAcgB,KAAK,UAGtF,4BACKjB,EAAMkB,KAAI,SAACC,EAAKC,GACb,OACI,wBAAIC,IAAKD,GACJD,EADL,IACW,uBAAGG,QAAS,kBAAM,EAAKd,WAAWY,IAAQP,UAAU,2B,GAvCrDU,c,eCCjBC,E,uKAEb,OACI,gCACC,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,c,GALuBF,aCFrB,SAASG,IACpB,OACI,6BACI,wBAAIC,MAAO,CAACC,UAAU,WAAtB,oB,WCCG,aACX,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlC,IACjC,kBAAC,IAAD,CAAOgC,KAAK,SAASE,UAAWL,MCCxBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2c34ea8f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Todolist.css'\r\n\r\nexport default class Todolist extends Component {\r\nstate = {\r\n    inputVal:\"\",items:[]\r\n}\r\nhandleChange = (event) => {\r\n    this.setState({\r\n        inputVal : event.target.value\r\n    });\r\n}\r\nstoreItems = (event) =>{\r\n    event.preventDefault();\r\n    const {inputVal} = this.state\r\n\r\n    this.setState({\r\n        items:[...this.state.items,inputVal],//spread operator\r\n        inputVal:\"\"\r\n    });\r\n}\r\ndeleteItem = (keyValue) => {                //or use filter()\r\n    const allItems = this.state.items\r\n    allItems.splice(keyValue,1)\r\n    this.setState({\r\n        items:allItems\r\n    })\r\n}   \r\n    render() {\r\n        const {inputVal,items} = this.state\r\n        return (\r\n            <div className = \"todo-container\">\r\n\r\n                <form className = \"input-section\" onSubmit={this.storeItems}>\r\n                    <h1>Todo List</h1>\r\n                    <input value={inputVal}  placeholder=\"Enter...\" onChange={this.handleChange} type=\"text\"/>\r\n                </form>\r\n\r\n                <ul>\r\n                    {items.map((data,index) =>{\r\n                        return(\r\n                            <li key={index}>\r\n                                {data} <i onClick={() => this.deleteItem(index)} className=\"fas fa-trash\"></i>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>  \r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Header.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n             <Link to=\"/\">HOME</Link>\r\n             <Link to=\"/about\">ABOUT</Link>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 style={{textAlign:'center'}}>About Component</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Todolist from './component/TodoApp/Todolist';\nimport Header from './component/Header/Header';\nimport About from './component/About/About';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nexport default () => {\n    return(\n        <Router>\n            <Header/>\n            <Route path='/' exact component={Todolist} />\n            <Route path='/about' component={About} />\n        </Router>\n    );\n}\n\n//OR\n// const App = () => <Todolist />\n// export default App;\n//OR\n// class App extends Component{\n//   render() {\n//     return(\n//       <div>\n//         <Todolist />\n//       </div>\n//     );\n//   }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}